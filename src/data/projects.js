export const projects = {
  1: {
    id: "1",
    title: "Event Management System",
    description:
      "A full-stack event management solution with role-based access and dynamic event participation.",
    longDescription:
      "A robust event management system built with Django (MVT architecture) that supports three user roles: Admin, Organizer, and Participant. Admins have full control over the platform, organizers can manage events (create, read, update), and participants can browse and register for events. Includes an intuitive admin dashboard, secure authentication, and email-based notifications.",
    image: "/event_management.png", // Replace with your actual project image if available
    technologies: [
      "Django",
      "Python",
      "HTML",
      "CSS",
      "JavaScript",
      "SQLite/PostgreSQL",
      "SMTP",
      "Bootstrap",
    ],
    githubUrl: "https://github.com/sarwar-jahin-port/event_management_django",
    liveUrl: "https://event-management-django-u181.onrender.com/",
    category: "Full Stack",
    features: [
      "Role-based access control (Admin, Organizer, Participant)",
      "CRUD functionality for events (Organizers cannot delete)",
      "Event registration and participation management",
      "Admin dashboard for platform oversight",
      "Responsive and clean UI",
      "Email notifications for registration and status updates",
      "Secure login and session handling",
      "Error handling and form validation",
    ],
    challenges: [
      "Creating a scalable and clean API structure in Django",
      "Synchronizing views, templates, and context data properly",
      "Handling SMTP configuration and email delivery for event notifications",
      "Implementing granular permission logic for each user role",
    ],
    solutions: [
      "Followed Django MVT pattern and modularized apps for better code management",
      "Studied Django’s official documentation thoroughly to resolve sync and template context issues",
      "Properly configured SMTP with retry and error logging mechanisms",
      "Used Django’s built-in permission decorators and role-based logic to restrict access as needed",
    ],
    timeline: "2 months",
    role: "Full Stack Developer",
    featured: true,
    status: "completed",
    stars: 45,
    forks: 12,
    views: 1850,
    lastUpdated: "2024-03-15",
    difficulty: "Advanced",
  },
  2: {
    id: "2",
    title: "Pixello (Frontend)",
    description:
      "A modern professional social media frontend built with React and Material UI, offering a clean UI/UX for professional interactions.",
    longDescription:
      "The frontend of Pixello is a React-based social platform designed for professionals to share experiences, build connections, and collaborate. Built with Material UI, the app presents a clean, responsive, and highly interactive interface. It includes dynamic content feeds, profile pages, post creation, notifications, and a secure payment integration system using AmarPay.",
    image:
      "https://images.pexels.com/photos/3184405/pexels-photo-3184405.jpeg?auto=compress&cs=tinysrgb&w=800", // replace with real screenshot if needed
    technologies: [
      "React",
      "Material-UI",
      "Axios",
      "React Router",
      "AmarPay Integration",
      "Context API",
    ],
    githubUrl: "https://github.com/sarwar-jahin-port/pixello-client",
    liveUrl: "https://pixello-client.vercel.app/",
    category: "Frontend",
    features: [
      "User authentication and profile management",
      "Create, edit, and delete posts",
      "Follow/unfollow other professionals",
      "Like, comment, and share functionality",
      "Responsive design for all devices",
      "Real-time notifications (simulated)",
      "AmarPay payment gateway integration",
      "Professional network dashboard",
    ],
    challenges: [
      "Designing a professional yet social-friendly UI using Material UI",
      "Integrating AmarPay payment gateway with proper validation",
      "Maintaining consistent state across multiple components",
      "Handling dynamic content loading and interactivity",
    ],
    solutions: [
      "Created reusable Material UI components and consistent layout system",
      "Integrated AmarPay with secure client-side handling and fallback messaging",
      "Used React Context API for efficient state sharing",
      "Optimized rendering using memoization and lazy loading where necessary",
    ],
    timeline: "2 months",
    role: "Frontend Developer",
    featured: false,
    status: "completed",
    stars: 45,
    forks: 12,
    views: 1850,
    lastUpdated: "2024-03-15",
    difficulty: "Advanced",
  },
  3: {
    id: "3",
    title: "Pixello (Backend)",
    description:
      "A Django-powered backend REST API for Pixello, enabling robust social media features, secure authentication, & payment processing.",
    longDescription:
      "The backend of Pixello is built using Django and Django REST Framework. It powers the complete set of RESTful APIs for users, posts, comments, payments, and notifications. It supports authentication with Djoser, structured data serialization, and database normalization. AmarPay payment integration is securely managed through custom views and callback handlers. The platform is designed to serve a scalable professional social media experience.",
    image:
      "https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=800", // replace if needed
    technologies: ["Django", "DRF", "AmarPay API", "MySQL", "JWT", "CORS"],
    githubUrl: "https://github.com/sarwar-jahin-port/pixello",
    liveUrl: "https://pixello-gamma.vercel.app/swagger/",
    category: "Backend",
    features: [
      "RESTful APIs for users, posts, comments, and payments",
      "JWT authentication with Djoser",
      "Normalized database models for scalable structure",
      "AmarPay payment gateway callback handling",
      "User roles and permission management",
      "Custom pagination and filtering support",
      "Secure password reset and email verification",
      "API versioning and error handling",
    ],
    challenges: [
      "Integrating and validating AmarPay payment gateway securely",
      "Structuring complex Django models for a social media system",
      "Handling nested serializers and custom permissions",
      "CORS and secure token authentication setup for frontend communication",
    ],
    solutions: [
      "Built custom AmarPay integration with post-transaction verification and response handling",
      "Applied Django best practices for model relations and serializer nesting",
      "Used Djoser and JWT to simplify token management securely",
      "Configured Django CORS headers for safe cross-origin frontend interaction",
    ],
    timeline: "3 months",
    role: "Backend Developer",
    featured: false,
    status: "completed",
    stars: 45,
    forks: 12,
    views: 1850,
    lastUpdated: "2024-03-15",
    difficulty: "Advanced",
  },
};
